set shell=/bin/bash
set nocompatible              " be iMproved, required

if has('nvim')
  call plug#begin('~/.local/share/nvim/plugged')
else
  call plug#begin('~/.vim/plugged')
endif

"" appearance
Plug 'altercation/vim-colors-solarized'
Plug 'tomasr/molokai'
Plug 'rakr/vim-one'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ryanoasis/vim-devicons'
" Plug 'edkolev/tmuxline.vim' tpm에서 odedlaz/tmux-onedark-theme 사용
Plug 'nathanaelkane/vim-indent-guides'
"Plug 'junegunn/vim-emoji'

"" git
Plug 'tpope/vim-git'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

"" editing
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'majutsushi/tagbar'
Plug 'editorconfig/editorconfig-vim'
Plug 'w0rp/ale'
" Plug 'Lokaltog/vim-easymotion'
" Plug 'justinmk/vim-sneak'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

"" vim
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin'

"" languages, syntax
Plug 'sheerun/vim-polyglot'
Plug 'idris-hackers/idris-vim'
Plug 'tfnico/vim-gradle'
Plug 'niftylettuce/vim-jinja'

call plug#end()


"""""""""
"" Config


"""""""""
"" editor
syntax on
filetype on
filetype plugin on 
filetype indent on
set number " 행표시
set imdisable " 모드를 변경하면 자동으로 키보드를 영문 레이아웃으로 변경
set expandtab " `tab`키를 눌렀을때 `tab`캐릭터 대신 스페이스 캐릭터 삽입
set tabstop=2 " `tab`키를 눌렀을때 움직이는 칸수
set shiftwidth=2 " 비주얼 모드 사용시 `<`, `>`키를 통해 좌,우로 쉬프팅되는 칸수
set softtabstop=2 " `tab`이나 `backspace`키를 눌렀을때, 공백의 캐릭터가 `space`이여도 `tab`으로 인식하여 작동하게 되는 칸수
set autoindent "  `enter`키로 새줄을 만들었을때 직전 줄을 참고하여 자동으로 들여쓰기  
" set cindent " `vi`의 `autoindent`와 같으며 C언어 스타일로 자동으로 들여쓰기  
set smartindent " `if`, `else`등의 키워드가 있을시 다음 줄에서 자동으로 들여쓰기
set incsearch " 검색시 emacs처럼 `enter`키를 안눌러도 한글자만 입력해도 검색 시작
set ignorecase " 검색시 대소문자 무시
set smartcase " 검색시 전체가 대문자이면 대문자만 검색
set hlsearch " 검색시 일치하는 단어를 전체 문서에서 하이라이팅
set encoding=utf8

nmap <Leader>q :nohlsearch<CR> " 검색 하이라이팅 키고 끄기
nmap <Leader>o :set paste!<CR> " 코드블럭 붙여넣기 모드를 키고 끄기
nmap <C-n> :bnext<CR> " 다음 순서 버퍼 이동
nmap <C-p> :bprev<CR> " 이전 순서 버퍼 이동
nmap <C-e> :e#<CR> " 방금전 버퍼로 이동

""""""""
"" mouse
" }}}
" " Mouse {{{
" " Send more characters for redraws
set ttyfast
  
" Enable mouse use in all modes
set mouse=a
   
" Set this to the name of your terminal that supports mouse codes.
" Must be one of: xterm, xterm2, netterm, dec, jsbterm, pterm
if !has('nvim')
  set ttymouse=xterm2
endif

"""""""""""""
"" appearance
" set t_Co=256 " http:://unix.stackexchange.com/questions/154012/terminal-colors-for-vim-airline-and-tmux-tmuxline 터미널 컬러 설정
set termguicolors " nvim ture color 지원
colorscheme one
" colorscheme molokai
" colorscheme solarized

" solarized theme
" http://stackoverflow.com/questions/7278267/incorrect-colors-with-vim-in-iterm2-using-solarized
" let g:solarized_termtrans = 1
" let g:solarized_visibility = "high"
" let g:solarized_contrast = "high"
" set background=dark

" molokai theme
" let g:molokai_original = 1
" let g:rehash256 = 1

" one theme
set background=dark

""""""""""""""
"" vim-airline
"set guifont=<FONT_NAME>:h<FONT_SIZE>
"set guifont=Source\ Code\ Pro\ for\ Powerline
"set guifont=Meslo\ LG\ M\ Regular\ for\ Powerline\ Nerd\ Font\ Complete
set guifont=MesloLGM\ Nerd\ Font
"set guifont=Monaco\ for\ Powerline\ Nerd\ Font\ Complete
set laststatus=2
let g:airline_powerline_fonts = 1
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'
"let g:airline_theme='molokai'
"let g:airline_theme='solarized'
"let g:airline_theme='base16'
let g:airline_theme='one'

""""""""""
"" python
let g:python_host_prog = '/Users/dididi/.pyenv/versions/neovim2/bin/python'
let g:python3_host_prog = '/Users/dididi/.pyenv/versions/neovim3/bin/python'

"""""""""""""""
"" vim-markdown
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_frontmatter=1


""""""""""""""""
"" vim-gitgutter
" https://github.com/airblade/vim-gitgutter/issues/164
" highlight clear SignColumn
" highlight GitGutterAdd ctermfg=green guifg=darkgreen
" highlight GitGutterChange ctermfg=yellow guifg=darkyellow
" highlight GitGutterDelete ctermfg=red guifg=darkred
" highlight GitGutterChangeDelete ctermfg=yellow guifg=darkyellow


"""""""""""""""""
"" vim-easymotion
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
nmap s <Plug>(easymotion-s)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-s2)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)


""""""""""""
"" NERDTree
" map <C-n> :NERDTreeToggle<CR>
map <Leader>e :NERDTreeToggle<CR>
" map <C-w><C-e> :NERDTreeToggle<CR>
" Auto start NERD tree when opening a directory
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | wincmd p | endif

" Auto start NERD tree if no files are specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | exe 'NERDTree' | endif

" Let quit work as expected if after entering :q the only window left open is NERD Tree itself
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


"""""""""""""""""""
"" EditorConfig-vim
let g:EditorConfig_core_mode = 'external_command'


"""""""""""""""
"" fugitive.vim
autocmd QuickFixCmdPost *grep* cwindow


"""""""""
"" tagbar
nmap <F8> :TagbarToggle<CR>


""""""""
"" deoplete
let g:deoplete#enable_at_startup = 1
call deoplete#custom#set('ultisnips', 'matchers', ['matcher_fuzzy'])

"""""""""""""
"" vim-easy-align
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)<Paste>


""""""
"" fzf
set rtp+=/usr/local/opt/fzf

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" fzf statusline
function! s:fzf_statusline()
  " Override statusline as you like
  highlight fzf1 ctermfg=161 ctermbg=251
  highlight fzf2 ctermfg=23 ctermbg=251
  highlight fzf3 ctermfg=237 ctermbg=251
  setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction

autocmd! User FzfStatusLine call <SID>fzf_statusline()


"""""""""
"" ultisnips

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

